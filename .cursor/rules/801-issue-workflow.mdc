---
description: AUTOMATE issue completion workflow when user says 'issue done' to create MR and update issue
globs: **/*
alwaysApply: true
---

# Issue Completion Workflow

## Context
- When user starts working on an issue ("issue start #xxx")
- When user indicates an issue is completed ("issue done #xxx")
- When changes need to be merged from feature branch to main
- When issue context needs to be documented
- When user explicitly requests to close the issue ("close issue #xxx")

## Requirements
- Create new branch from current branch when starting issue
- Update issue status to "In Progress" when starting
- Summarize conversation context and implementation details
- Document all key decisions and code changes in issue
- Create new branch from current branch for completion
- Commit all current changes with meaningful message
- Create merge request targeting main branch
- Link merge request with related issue
- Wait for explicit user approval before closing issue

## Examples
<example>
User: "issue start #123"
AI Actions:
1. Create and switch to new branch: "feature/issue-123-add-todo-component"
2. Update issue status to "In Progress"

User: "issue done #123"
AI Actions:
1. Summarize conversation context:
   ```
   ## Implementation Summary
   - Added Todo component with React hooks
   - Implemented CRUD operations with local storage
   - Added unit tests for core functionality
   
   ## Key Decisions
   - Used functional components over class components
   - Implemented optimistic updates for better UX
   - Added error boundary for error handling
   
   ## Technical Details
   - React hooks: useState, useEffect, useCallback
   - LocalStorage for data persistence
   - Jest and React Testing Library for tests
   ```
2. Update issue #123 with implementation summary
3. Create branch: "feature/issue-123-add-todo-component"
4. Commit changes:
   ```
   git add .
   git commit -m "feat: implement todo component
   
   - Add Todo.tsx component with CRUD operations
   - Implement local storage persistence
   - Add comprehensive unit tests
   
   Related to #123"
   ```
5. Create MR: current branch -> main with issue reference

User: "close issue #123"
AI Actions:
1. Update issue status to closed
2. Add closing comment with final implementation summary
</example>

<example type="invalid">
❌ Creating branch without issue reference
❌ Committing without meaningful message
❌ Creating MR without linking issue
❌ Not documenting implementation details
❌ Automatically closing issue without user approval
❌ Using "Closes #123" in commit message without user approval
❌ Not creating new branch when starting issue
❌ Not updating issue status when starting work
❌ Not summarizing conversation context in issue
❌ Missing key decisions and technical details
</example>

## Critical Rules
  - ALWAYS create branch from current branch
  - ALWAYS include issue number in branch name
  - ALWAYS write descriptive commit messages
  - ALWAYS update issue with implementation details
  - ALWAYS link MR with related issue
  - NEVER push sensitive information
  - NEVER merge directly without review
  - NEVER automatically close issues
  - ONLY close issues when explicitly requested by user
  - ALWAYS create new branch when starting issue work
  - ALWAYS update issue status when starting work
  - MUST summarize conversation context in issue
  - MUST document all key decisions and changes 