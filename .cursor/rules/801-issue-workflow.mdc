---
description: AUTOMATE issue workflow with strict documentation-first approach when handling issue lifecycle
globs: **/*
alwaysApply: true
---

# Issue Workflow

## Context
- When starting work on an issue ("issue start #xxx")
- When completing an issue ("issue done #xxx")
- When closing an issue ("close issue #xxx")
- When documentation needs to be maintained

## Requirements
- Follow strict order for issue lifecycle actions
- Create and maintain documentation before code changes
- Use standardized templates for consistency
- Enforce documentation-first approach

## Command Actions
### "issue start #xxx"
1. Create feature branch
2. Update issue status
3. Add implementation plan

### "issue done #xxx" (STRICT ORDER)
1. Create implementation summary FIRST
2. Update issue documentation BEFORE other actions
3. ONLY THEN:
   - Commit final changes
   - Push changes
   - Create merge request
   - Link merge request with issue

### "issue close #xxx"
1. Verify documentation completeness
2. Update issue status
3. Add closing summary

## Implementation Template
```markdown
# Implementation Summary for #XXX 🚀

## 📝 Overview
[Brief description of the implemented feature/fix]

## 🛠 Implementation Details
### Components/Features Added
- List of main components
- Key features implemented

### Core Features
- ✨ Feature 1
- 💾 Feature 2
- 🧪 Feature 3

## 🤔 Key Decisions
1. **Architecture Choice**
   - Chosen approach
   - Rationale

2. **Technical Decisions**
   - Technical choices
   - Trade-offs considered

## 🔧 Technical Implementation
### Technologies Used
- List of technologies
- Key libraries/frameworks

### Architecture/Flow
1. Component interactions
2. Data flow
3. Key processes

## 📈 Future Improvements
- [ ] Potential enhancement 1
- [ ] Potential enhancement 2

## 🎯 Completion Status
- ✅ Feature 1
- ✅ Feature 2
- ✅ Documentation
```

## Examples
<example>
User: "issue done #123"
AI:
1. Creates implementation summary FIRST:
   ```markdown
   # Implementation Summary for #123 🚀
   ## 📝 Overview
   Added user authentication system
   ## 🛠 Implementation Details
   - Implemented JWT-based auth
   - Added login/register UI
   ## 🤔 Key Decisions
   - Used JWT for stateless auth
   - Implemented refresh token rotation
   ```
2. Updates issue with the summary
3. ONLY THEN proceeds with code changes and MR
</example>

<example type="invalid">
❌ User: "issue done #123"
AI: Creates merge request before documentation

❌ User: "issue done #123"
AI: Pushes code changes without implementation summary

❌ User: "issue done #123"
AI: Closes issue without proper documentation
</example>

## Critical Rules
  - MUST create documentation BEFORE any code changes
  - MUST follow strict action order (docs -> code -> MR)
  - NEVER skip documentation steps
  - ALWAYS use provided templates
  - VERIFY documentation completeness before closing
  - MAINTAIN clear structure and use emojis for readability 