---
description: AUTOMATE issue workflow with strict documentation-first approach when handling issue lifecycle
globs: **/*
alwaysApply: true
---

# Issue Workflow

## Context
- When starting work on an issue ("issue start #xxx")
- When completing an issue ("issue done #xxx")
- When closing an issue ("close issue #xxx")
- When documentation needs to be maintained
- When adding formatted content to issues

## Requirements
- Follow strict order for issue lifecycle actions
- Create and maintain documentation before code changes
- Use standardized templates for consistency
- Enforce documentation-first approach
- Use printf for formatted content
- Use gh issue comment with direct input
- Prevent newline character issues in commands

## Command Actions
### Adding Formatted Content to Issues
```bash
# Basic content addition
printf "# Title\n\nContent" | gh issue comment xxx -F -

# Formatted content with sections
printf '# Update Title üìù\n\n## Changes\n- Change 1\n- Change 2' | gh issue comment xxx -F -

# Content with code blocks
printf '# Technical Update\n\n```typescript\nconst example = true;\n```' | gh issue comment xxx -F -
```

### "issue start #xxx"
```bash
# Add implementation plan
printf '# Implementation Plan üìã\n\n## Overview\n[Plan details]\n\n## Steps\n1. Step one\n2. Step two' | gh issue comment xxx -F -
```

### "issue done #xxx" (STRICT ORDER)
```bash
# Add implementation summary
printf '# Implementation Summary ‚úÖ\n\n## Changes Made\n[Changes details]\n\n## Testing\n- Test results' | gh issue comment xxx -F -
```

### "issue close #xxx"
```bash
# Add closing summary
printf '# Closing Summary üèÅ\n\n## Overview\n[Summary details]\n\n## Verification\n- Verified items' | gh issue comment xxx -F -
```

## Examples
<example>
‚úÖ Adding formatted content:
```bash
printf '# Feature Update üöÄ\n\n## Changes\n- Added user auth\n- Fixed bugs' | gh issue comment 123 -F -
```

‚úÖ Adding implementation plan:
```bash
printf '# Implementation Plan üìã\n\n## Steps\n1. Setup database\n2. Create API' | gh issue comment 456 -F -
```
</example>

<example type="invalid">
‚ùå Using echo with newlines:
```bash
echo "Title
Content" | gh issue comment 123 -F -
```

‚ùå Using temporary files:
```bash
echo "Content" > temp.md
gh issue comment 123 -F temp.md
rm temp.md
```

‚ùå Direct string in comment:
```bash
gh issue comment 123 "Raw content"
```
</example>

## Critical Rules
  - ALWAYS use printf for formatted content
  - NEVER use temporary files for content
  - ALWAYS use gh issue comment with -F - for input
  - NEVER include raw newlines in commands
  - ESCAPE special characters properly
  - USE single quotes for content with special characters
  - MAINTAIN proper markdown formatting
  - INCLUDE emojis for better readability
  - VERIFY content format before sending