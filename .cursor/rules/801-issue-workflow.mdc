---
description: AUTOMATE issue completion workflow when user says 'issue done' to create MR and update issue
globs: **/*
alwaysApply: true
---

# Issue Completion Workflow

## Context
- When user starts working on an issue ("issue start #xxx")
- When user indicates an issue is completed ("issue done #xxx")
- When changes need to be merged from feature branch to main
- When issue context needs to be documented
- When user explicitly requests to close the issue ("close issue #xxx")

## Requirements
- Create new branch from current branch when starting issue
- Update issue status to "In Progress" when starting
- Summarize conversation context and implementation details
- Document all key decisions and code changes in issue
- Create new branch from current branch for completion
- Commit all current changes with meaningful message
- Create merge request targeting main branch
- Link merge request with related issue
- Wait for explicit user approval before closing issue

## Examples
<example>
User: "issue start #123"
AI Actions:
1. Create and switch to new branch: "feature/issue-123-add-todo-component"
2. Update issue status to "In Progress"

User: "issue done #123"
AI Actions:
1. Summarize conversation context:
   ```markdown
   # Implementation Summary for #123 üöÄ
   
   ## üìù Overview
   Todo component implementation with React hooks and local storage integration.
   
   ## üõ† Implementation Details
   ### Components Added
   - `TodoComponent.tsx`: Main todo management interface
   - `TodoItem.tsx`: Individual todo item component
   - `TodoForm.tsx`: Form for creating/editing todos
   
   ### Core Features
   - ‚ú® CRUD operations for todo items
   - üíæ Local storage persistence
   - üß™ Comprehensive test coverage
   
   ## ü§î Key Decisions
   1. **Architecture Choice**
      - Used functional components with hooks for better code organization
      - Implemented React Context for state management
   
   2. **UX Improvements**
      - Added optimistic updates for instant feedback
      - Implemented error boundaries for graceful error handling
      - Added loading states and animations
   
   ## üîß Technical Implementation
   ### Technologies Used
   - React Hooks
     - useState for local state
     - useEffect for side effects
     - useCallback for performance
   
   ### Data Flow
   1. User interaction ‚Üí Component state
   2. State change ‚Üí Local storage update
   3. Storage sync ‚Üí UI refresh
   
   ### Testing Strategy
   - Unit tests with Jest
   - Integration tests with React Testing Library
   - E2E tests for critical paths
   
   ## üìà Performance Considerations
   - Implemented memo for expensive calculations
   - Optimized re-renders with useMemo
   - Lazy loading for large components
   
   ## üéØ Future Improvements
   - [ ] Add batch operations
   - [ ] Implement undo/redo
   - [ ] Add keyboard shortcuts
   ```
2. Update issue #123 with implementation summary
3. Create branch: "feature/issue-123-add-todo-component"
4. Commit changes:
   ```
   git add .
   git commit -m "feat: implement todo component
   
   - Add Todo.tsx component with CRUD operations
   - Implement local storage persistence
   - Add comprehensive unit tests
   
   Related to #123"
   ```
5. Create MR: current branch -> main with issue reference

User: "close issue #123"
AI Actions:
1. Update issue status to closed
2. Add closing comment with final implementation summary:
   ```markdown
   # üéâ Issue Completion Summary
   
   ## ‚úÖ Completed Features
   All planned features have been successfully implemented and tested.
   
   ## üîç Final Review
   - All tests passing
   - Code review comments addressed
   - Documentation updated
   - Performance metrics met
   
   ## üì¶ Deliverables
   - [x] Todo component implementation
   - [x] Local storage integration
   - [x] Test coverage > 90%
   - [x] User documentation
   ```
</example>

<example type="invalid">
‚ùå Creating branch without issue reference
‚ùå Committing without meaningful message
‚ùå Creating MR without linking issue
‚ùå Not documenting implementation details
‚ùå Automatically closing issue without user approval
‚ùå Using "Closes #123" in commit message without user approval
‚ùå Not creating new branch when starting issue
‚ùå Not updating issue status when starting work
‚ùå Not summarizing conversation context in issue
‚ùå Missing key decisions and technical details
‚ùå Using plain text without proper formatting
‚ùå Omitting emojis and visual hierarchy
</example>

## Critical Rules
  - ALWAYS create branch from current branch
  - ALWAYS include issue number in branch name
  - ALWAYS write descriptive commit messages
  - ALWAYS update issue with implementation details
  - ALWAYS link MR with related issue
  - NEVER push sensitive information
  - NEVER merge directly without review
  - NEVER automatically close issues
  - ONLY close issues when explicitly requested by user
  - ALWAYS create new branch when starting issue work
  - ALWAYS update issue status when starting work
  - MUST summarize conversation context in issue
  - MUST document all key decisions and changes
  - MUST use proper markdown formatting with emojis
  - MUST maintain clear visual hierarchy in documentation 