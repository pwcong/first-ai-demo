---
description: AUTOMATE issue workflow with strict documentation-first approach when handling issue lifecycle
globs: **/*
alwaysApply: true
---
# Issue Workflow

## Context
- When starting work on an issue ("issue start #xxx")
- When completing an issue ("issue done #xxx")
- When closing an issue ("close issue #xxx")
- When documentation needs to be maintained

## Requirements
- Follow strict order for issue lifecycle actions
- Create and maintain documentation before code changes
- Use standardized templates for consistency
- Enforce documentation-first approach
- Use direct GitHub CLI commands for issue management

## Command Actions

### Best Practice for Adding Formatted Comments
To ensure proper formatting of issue comments with Markdown and emojis:
1. Create a temporary markdown file with the comment content:
   ```bash
   echo 'Your formatted comment content' > comment.md
   ```
2. Add the comment using gh CLI with -F flag:
   ```bash
   gh issue comment ISSUE_NUMBER -F comment.md
   ```
3. Clean up the temporary file:
   ```bash
   rm comment.md
   ```

This method preserves all Markdown formatting, emojis, and proper line breaks.

### "issue start #xxx"
1. Create feature branch
2. Update issue status
3. Add implementation plan directly:
   ```bash
   gh issue comment xxx --body "# Implementation Plan
   ## Overview
   [Brief description of planned implementation]
   
   ## Technical Approach
   [Detailed technical approach]
   
   ## Timeline
   [Expected timeline]"
   ```

### "issue done #xxx" (STRICT ORDER)
1. Create implementation summary FIRST:
   ```bash
   # Create temporary markdown file
   cat > implementation_summary.md << 'EOL'
# Implementation Summary for #xxx 🚀

## 📝 Overview
[Brief description of the implemented feature/fix]

## 🛠 Implementation Details
### Components/Features Added
- List of main components
- Key features implemented

### Core Features
- ✨ Feature 1
- 💾 Feature 2
- 🧪 Feature 3

## 🤔 Key Decisions
1. **Architecture Choice**
   - Chosen approach
   - Rationale

2. **Technical Decisions**
   - Technical choices
   - Trade-offs considered

## 🔧 Technical Implementation
### Technologies Used
- List of technologies
- Key libraries/frameworks

### Architecture/Flow
1. Component interactions
2. Data flow
3. Key processes

## 📈 Future Improvements
- [ ] Potential enhancement 1
- [ ] Potential enhancement 2

## 🎯 Completion Status
- ✅ Feature 1
- ✅ Feature 2
- ✅ Documentation
EOL

   # Add comment using the file
   gh issue comment xxx -F implementation_summary.md
   
   # Clean up
   rm implementation_summary.md
   ```
2. Update issue documentation BEFORE other actions
3. ONLY THEN:
   - Commit final changes
   - Push changes
   - Create merge request
   - Link merge request with issue

### "issue close #xxx"
1. Create closing summary:
   ```bash
   # Create temporary markdown file
   cat > closing_summary.md << 'EOL'
# Closing Summary for #xxx 🏁

## 📝 Final Status
[Brief description of the final state]

## ✅ Completed Items
- Item 1
- Item 2

## 📋 Documentation Status
- All documentation updated
- No pending items
EOL

   # Add comment using the file
   gh issue comment xxx -F closing_summary.md
   
   # Clean up
   rm closing_summary.md
   ```
2. Verify documentation completeness
3. Close the issue:
   ```bash
   gh issue close xxx
   ```

## Examples
<example>
User: "issue done #123"
AI:
1. Creates implementation summary directly:
   ```bash
   gh issue comment 123 --body "# Implementation Summary for #123 🚀
   ## 📝 Overview
   Added user authentication system
   ## 🛠 Implementation Details
   - Implemented JWT-based auth
   - Added login/register UI
   ## 🤔 Key Decisions
   - Used JWT for stateless auth
   - Implemented refresh token rotation"
   ```

2. ONLY THEN proceeds with code changes and MR
</example>

<example type="invalid">
❌ User: "issue done #123"
AI: Creates merge request before documentation

❌ User: "issue done #123"
AI: Pushes code changes without implementation summary

❌ User: "issue done #123"
AI: Closes issue without proper documentation

❌ User: "issue done #123"
AI: Uses incorrect command format for issue comments
</example>

## Critical Rules
  - MUST create documentation BEFORE any code changes
  - MUST follow strict action order (docs -> code -> MR)
  - NEVER skip documentation steps
  - ALWAYS use provided templates
  - VERIFY documentation completeness before closing
  - MAINTAIN clear structure and use emojis for readability
  - USE direct GitHub CLI commands for all issue operations
  - ENSURE proper formatting of issue comments 